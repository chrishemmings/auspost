<?php
/**
 * AccountInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  ChrisHemmings\AusPost
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Australia Post Shipping & Tracking API
 *
 * Integrating your systems with Australia Post and StarTrack using the Shipping and Tracking APIs enables you to lodge the information we need when sending parcels through our delivery networks.  You can currently use the Shipping and Tracking APIs for...  - Lodgement of parcels â€“ creates an order, including all the shipments and items, and lodges the parcels with Australia Post and StarTrack  - Label printing - prints our most up-to-date labels to improve your operational efficiency  - Getting your contract details - gives all your current account information, including products, contract expiry dates & product features  - Getting your contract pricing - provides an indicative price at checkout to enable the best service to be selected, giving you confidence of cost of lodgement  - Tracking your parcels - allows you to easily surface tracking information on your website for your staff or customers
 *
 * OpenAPI spec version: 1.0.0
 * Contact: cwhemmings@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ChrisHemmings\AusPost\Client\Model;

use \ArrayAccess;
use \ChrisHemmings\AusPost\ObjectSerializer;

/**
 * AccountInformation Class Doc Comment
 *
 * @category Class
 * @package  ChrisHemmings\AusPost
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountInformation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_number' => 'string',
        'name' => 'string',
        'valid_from' => 'string',
        'valid_to' => 'string',
        'expired' => 'bool',
        'addresses' => '\ChrisHemmings\AusPost\Client\Model\Address[]',
        'details' => '\ChrisHemmings\AusPost\Client\Model\AccountDetails',
        'postage_products' => '\ChrisHemmings\AusPost\Client\Model\PostageProducts[]',
        'merchant_location_id' => 'string',
        'credit_blocked' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_number' => null,
        'name' => null,
        'valid_from' => null,
        'valid_to' => null,
        'expired' => null,
        'addresses' => null,
        'details' => null,
        'postage_products' => null,
        'merchant_location_id' => null,
        'credit_blocked' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_number' => 'account_number',
        'name' => 'name',
        'valid_from' => 'valid_from',
        'valid_to' => 'valid_to',
        'expired' => 'expired',
        'addresses' => 'addresses',
        'details' => 'details',
        'postage_products' => 'postage_products',
        'merchant_location_id' => 'merchant_location_id',
        'credit_blocked' => 'credit_blocked'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_number' => 'setAccountNumber',
        'name' => 'setName',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo',
        'expired' => 'setExpired',
        'addresses' => 'setAddresses',
        'details' => 'setDetails',
        'postage_products' => 'setPostageProducts',
        'merchant_location_id' => 'setMerchantLocationId',
        'credit_blocked' => 'setCreditBlocked'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_number' => 'getAccountNumber',
        'name' => 'getName',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo',
        'expired' => 'getExpired',
        'addresses' => 'getAddresses',
        'details' => 'getDetails',
        'postage_products' => 'getPostageProducts',
        'merchant_location_id' => 'getMerchantLocationId',
        'credit_blocked' => 'getCreditBlocked'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['valid_from'] = isset($data['valid_from']) ? $data['valid_from'] : null;
        $this->container['valid_to'] = isset($data['valid_to']) ? $data['valid_to'] : null;
        $this->container['expired'] = isset($data['expired']) ? $data['expired'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['postage_products'] = isset($data['postage_products']) ? $data['postage_products'] : null;
        $this->container['merchant_location_id'] = isset($data['merchant_location_id']) ? $data['merchant_location_id'] : null;
        $this->container['credit_blocked'] = isset($data['credit_blocked']) ? $data['credit_blocked'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number account_number
     *
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return string
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param string $valid_from valid_from
     *
     * @return $this
     */
    public function setValidFrom($valid_from)
    {
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     *
     * @return string
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     *
     * @param string $valid_to valid_to
     *
     * @return $this
     */
    public function setValidTo($valid_to)
    {
        $this->container['valid_to'] = $valid_to;

        return $this;
    }

    /**
     * Gets expired
     *
     * @return bool
     */
    public function getExpired()
    {
        return $this->container['expired'];
    }

    /**
     * Sets expired
     *
     * @param bool $expired expired
     *
     * @return $this
     */
    public function setExpired($expired)
    {
        $this->container['expired'] = $expired;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \ChrisHemmings\AusPost\Client\Model\Address[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \ChrisHemmings\AusPost\Client\Model\Address[] $addresses addresses
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \ChrisHemmings\AusPost\Client\Model\AccountDetails
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \ChrisHemmings\AusPost\Client\Model\AccountDetails $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets postage_products
     *
     * @return \ChrisHemmings\AusPost\Client\Model\PostageProducts[]
     */
    public function getPostageProducts()
    {
        return $this->container['postage_products'];
    }

    /**
     * Sets postage_products
     *
     * @param \ChrisHemmings\AusPost\Client\Model\PostageProducts[] $postage_products postage_products
     *
     * @return $this
     */
    public function setPostageProducts($postage_products)
    {
        $this->container['postage_products'] = $postage_products;

        return $this;
    }

    /**
     * Gets merchant_location_id
     *
     * @return string
     */
    public function getMerchantLocationId()
    {
        return $this->container['merchant_location_id'];
    }

    /**
     * Sets merchant_location_id
     *
     * @param string $merchant_location_id merchant_location_id
     *
     * @return $this
     */
    public function setMerchantLocationId($merchant_location_id)
    {
        $this->container['merchant_location_id'] = $merchant_location_id;

        return $this;
    }

    /**
     * Gets credit_blocked
     *
     * @return bool
     */
    public function getCreditBlocked()
    {
        return $this->container['credit_blocked'];
    }

    /**
     * Sets credit_blocked
     *
     * @param bool $credit_blocked credit_blocked
     *
     * @return $this
     */
    public function setCreditBlocked($credit_blocked)
    {
        $this->container['credit_blocked'] = $credit_blocked;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


